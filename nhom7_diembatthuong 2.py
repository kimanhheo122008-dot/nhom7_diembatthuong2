# -*- coding: utf-8 -*-
"""nhom7_diembatthuong.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j-OnW1KIAAO0unlsLGpARj0_TtOng9Rm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# T·∫Øt c·∫£nh b√°o ƒë·ªÉ hi·ªÉn th·ªã output g·ªçn g√†ng h∆°n
warnings.filterwarnings('ignore')

# --- 1. Thi·∫øt l·∫≠p D·ªØ li·ªáu ---
file_name = 'Studentscore.csv'

# ƒê·ªçc file CSV
try:
    df = pd.read_csv(file_name)
    print("‚úÖ ƒê·ªçc file th√†nh c√¥ng!")
except FileNotFoundError:
    print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file {file_name}. Vui l√≤ng ƒë·∫£m b·∫£o file ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n.")
    exit()

# C√°c c·ªôt ƒëi·ªÉm c·∫ßn ph√¢n t√≠ch Z-score
score_cols = ['TX1', 'TX2', 'TX3', 'GK', 'CK']
group_col = 'lop' # C·ªôt ƒë∆∞·ª£c d√πng ƒë·ªÉ nh√≥m (ph√¢n lo·∫°i theo l·ªõp)
z_score_threshold = 2 # Ng∆∞·ª°ng x√°c ƒë·ªãnh gi√° tr·ªã b·∫•t th∆∞·ªùng

# Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c c·ªôt c·∫ßn thi·∫øt
missing_cols = [col for col in score_cols + [group_col, 'MaHS'] if col not in df.columns]
if missing_cols:
    print(f"‚ùå L·ªói: Thi·∫øu c√°c c·ªôt quan tr·ªçng trong file: {', '.join(missing_cols)}")
    print("Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c file CSV.")
    exit()

# --- 2. H√†m t√≠nh Z-score v√† X√°c ƒë·ªãnh B·∫•t th∆∞·ªùng ---
def calculate_zscore_and_outlier(df, score_col, group_col, threshold=2):
    """T√≠nh Z-score v√† x√°c ƒë·ªãnh gi√° tr·ªã b·∫•t th∆∞·ªùng theo l·ªõp cho m·ªôt c·ªôt ƒëi·ªÉm."""

    # H√†m t√≠nh Z-score
    def zscore_func(series):
        std_dev = series.std()
        # Tr√°nh chia cho 0
        if std_dev == 0:
            return 0
        return (series - series.mean()) / std_dev

    # √Åp d·ª•ng t√≠nh Z-score theo t·ª´ng nh√≥m (lop)
    z_score_col = f'Z_{score_col}'
    df[z_score_col] = df.groupby(group_col)[score_col].transform(zscore_func)

    # X√°c ƒë·ªãnh B·∫•t th∆∞·ªùng
    outlier_col = f'Is_Outlier_{score_col}'
    df[outlier_col] = np.where(np.abs(df[z_score_col]) > threshold, 'B·∫•t th∆∞·ªùng', 'B√¨nh th∆∞·ªùng')

    return df, z_score_col, outlier_col

# --- 3. Th·ª±c hi·ªán t√≠nh to√°n cho T·∫§T C·∫¢ c√°c b√†i ki·ªÉm tra ---
results_data = []

for col in score_cols:
    df, z_col_name, outlier_col_name = calculate_zscore_and_outlier(df, col, group_col, z_score_threshold)

    # T·ªïng h·ª£p d·ªØ li·ªáu s·ªë l∆∞·ª£ng h·ªçc sinh b·∫•t th∆∞·ªùng ƒë·ªÉ tr·ª±c quan h√≥a
    outlier_counts = df.groupby(group_col)[outlier_col_name].value_counts().unstack(fill_value=0).reset_index()

    # L·∫•y s·ªë l∆∞·ª£ng B·∫•t th∆∞·ªùng v√† th√™m c·ªôt t√™n b√†i ki·ªÉm tra
    if 'B·∫•t th∆∞·ªùng' in outlier_counts.columns:
        outlier_counts = outlier_counts[[group_col, 'B·∫•t th∆∞·ªùng']]
        outlier_counts.columns = [group_col, 'Count']
        outlier_counts['Test'] = col
        results_data.append(outlier_counts)

# G·ªôp t·∫•t c·∫£ k·∫øt qu·∫£ v√†o m·ªôt DataFrame duy nh·∫•t ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
if results_data:
    final_plot_df = pd.concat(results_data, ignore_index=True)
    print("\n‚úÖ Ho√†n th√†nh t√≠nh to√°n Z-score v√† x√°c ƒë·ªãnh b·∫•t th∆∞·ªùng cho t·∫•t c·∫£ b√†i ki·ªÉm tra.")
else:
    print("\n‚ùå L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·ªïng h·ª£p cho bi·ªÉu ƒë·ªì.")
    exit()

# --- 4. Tr·ª±c quan h√≥a b·∫±ng Bi·ªÉu ƒë·ªì C·ªôt ---

sns.set_style("whitegrid")
plt.figure(figsize=(20, 10))

# V·∫Ω bi·ªÉu ƒë·ªì c·ªôt cho s·ªë l∆∞·ª£ng h·ªçc sinh B·∫§T TH∆Ø·ªúNG theo L·ªõp v√† B√†i ki·ªÉm tra
bar_plot = sns.barplot(
    x=group_col,
    y='Count',
    hue='Test',
    data=final_plot_df,
    palette='viridis' # S·ª≠ d·ª•ng b·∫£ng m√†u ƒëa d·∫°ng
)

plt.title(f'S·ªë l∆∞·ª£ng H·ªçc sinh B·∫•t th∆∞·ªùng (|Z| > {z_score_threshold}) theo L·ªõp v√† T·ª´ng B√†i Ki·ªÉm tra', fontsize=18, fontweight='bold')
plt.xlabel('L·ªõp', fontsize=15)
plt.ylabel('S·ªë l∆∞·ª£ng H·ªçc sinh B·∫•t th∆∞·ªùng', fontsize=15)
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='B√†i ki·ªÉm tra', title_fontsize='13', fontsize='12')

# Th√™m gi√° tr·ªã s·ªë l√™n tr√™n c·ªôt (gi√∫p ƒë·ªçc d·ªØ li·ªáu d·ªÖ d√†ng h∆°n)
for container in bar_plot.containers:
    bar_plot.bar_label(container, fmt='%d', padding=3, fontsize=10)

plt.tight_layout()
plt.show()

# --- 5. T√≥m t·∫Øt D·ªØ li·ªáu B·∫•t th∆∞·ªùng (In ra B√°o c√°o) ---
print("\n--- B√ÅO C√ÅO T·ªîNG H·ª¢P V·ªÄ H·ªåC SINH B·∫§T TH∆Ø·ªúNG ---")

# T√≠nh t·ªïng s·ªë b·∫•t th∆∞·ªùng (t√≠nh c·∫£ tr√πng l·∫∑p, m·ªôt HS c√≥ th·ªÉ b·∫•t th∆∞·ªùng ·ªü nhi·ªÅu b√†i)
total_outliers = final_plot_df['Count'].sum()
print(f"T·ªïng s·ªë l·∫ßn m·ªôt h·ªçc sinh ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† B·∫•t th∆∞·ªùng (tr√™n t·∫•t c·∫£ b√†i ki·ªÉm tra): {total_outliers}")

print("\n--- Danh s√°ch H·ªçc sinh B·∫•t th∆∞·ªùng (Top 5 cho m·ªói b√†i ki·ªÉm tra) ---")
for col in score_cols:
    z_col = f'Z_{col}'
    outlier_col = f'Is_Outlier_{col}'

    outliers_list = df[df[outlier_col] == 'B·∫•t th∆∞·ªùng'].sort_values(by=z_col, key=lambda x: np.abs(x), ascending=False)

    if not outliers_list.empty:
        print(f"\n* B√†i ki·ªÉm tra {col} ({len(outliers_list)} HS B·∫•t th∆∞·ªùng):")
        display_cols = ['MaHS', group_col, col, z_col]
        print(outliers_list[display_cols].head(5).to_markdown(index=False, numalign="left", stralign="left"))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# ==============================================================================
# B∆Ø·ªöC 1: C·∫•u h√¨nh v√† T·∫£i d·ªØ li·ªáu
# ==============================================================================

# C·∫•u h√¨nh hi·ªÉn th·ªã ƒë·ªì th·ªã
sns.set_style("whitegrid")

# T·∫£i file CSV t·ª´ m√°y t√≠nh c√° nh√¢n c·ªßa b·∫°n l√™n Colab
file_name = "Student_GradeSummary.csv"
print(">>> VUI L√íNG T·∫¢I L√äN FILE 'Student_GradeSummary.csv' khi c·ª≠a s·ªï ch·ªçn file xu·∫•t hi·ªán. <<<")
try:
    # L·ªánh files.upload() s·∫Ω m·ªü c·ª≠a s·ªï ch·ªçn file
    uploaded = files.upload()

    if file_name in uploaded:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
        df = pd.read_csv(file_name)
        print(f"\n‚úÖ ƒê√£ t·∫£i v√† ƒë·ªçc th√†nh c√¥ng file '{file_name}'.")
    else:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{file_name}' ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n.")
        exit() # D·ª´ng ch∆∞∆°ng tr√¨nh n·∫øu kh√¥ng t√¨m th·∫•y file

except Exception as e:
    print(f"‚ùå L·ªói trong qu√° tr√¨nh t·∫£i file: {e}")
    exit()

# ==============================================================================
# B∆Ø·ªöC 2: Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
# ==============================================================================

# 1. ƒê·ªïi t√™n c·ªôt ƒë·ªÉ d·ªÖ l√†m vi·ªác h∆°n
column_mapping = {
    'STT': 'stt', 'MaHS': 'mahs', 'lop': 'lop', 'Toan': 'toan',
    'Van': 'van', 'Ly': 'ly', 'Hoa': 'hoa', 'Ngoaingu': 'ngoaingu',
    'Su': 'su', 'Tin': 'tin', 'Sinh': 'sinh', 'Dia': 'dia'
}
df = df.rename(columns=column_mapping)

# 2. X√°c ƒë·ªãnh c√°c c·ªôt ƒëi·ªÉm
score_cols = ['toan', 'van', 'ly', 'hoa', 'ngoaingu', 'su', 'tin', 'sinh', 'dia']

# 3. Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ƒëi·ªÉm sang ki·ªÉu s·ªë (numeric), l·ªói s·∫Ω ƒë∆∞·ª£c g√°n l√† NaN
for col in score_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

print("\n--- 5 D√≤ng d·ªØ li·ªáu sau khi ti·ªÅn x·ª≠ l√Ω ---")
print(df.head())


# ==============================================================================
# B∆Ø·ªöC 3: T√≠nh To√°n Z-score v√† X√°c ƒë·ªãnh Gi√° tr·ªã B·∫•t th∆∞·ªùng
# ==============================================================================

def calculate_zscore_and_outliers(data, score_cols):
    """
    T√≠nh Z-score cho t·ª´ng m√¥n h·ªçc, chia theo l·ªõp, v√† x√°c ƒë·ªãnh gi√° tr·ªã b·∫•t th∆∞·ªùng.
    Outlier ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† |Z-score| > 2.
    """
    df_result = data.copy()

    # T·∫°o c√°c c·ªôt m·ªõi ƒë·ªÉ l∆∞u Z-score v√† c·ªù Outlier
    for col in score_cols:
        df_result[f'{col}_ZScore'] = np.nan
        df_result[f'{col}_IsOutlier'] = False

    # L·∫∑p qua t·ª´ng l·ªõp ƒë·ªÉ t√≠nh to√°n ri√™ng bi·ªát (ph√¢n t√≠ch theo nh√≥m)
    for lop in df_result['lop'].unique():
        class_data = df_result[df_result['lop'] == lop]

        for col in score_cols:
            # 1. T√≠nh Mean (Trung b√¨nh) v√† Standard Deviation (ƒê·ªô l·ªách chu·∫©n) TRONG L·ªöP ƒë√≥
            mean = class_data[col].mean()
            std = class_data[col].std()

            # 2. T√≠nh Z-score: Z = (X - Mean) / Std
            if std > 0:
                z_score = (class_data[col] - mean) / std
            else:
                # Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: Std = 0 (t·∫•t c·∫£ ƒëi·ªÉm b·∫±ng nhau), Z-score = 0
                z_score = 0
                z_score[class_data[col].isna()] = np.nan # Gi·ªØ NaN cho c√°c ƒëi·ªÉm thi·∫øu

            # 3. G√°n k·∫øt qu·∫£ v√†o DataFrame
            df_result.loc[df_result['lop'] == lop, f'{col}_ZScore'] = z_score

            # 4. X√°c ƒë·ªãnh Outlier: |Z-score| > 2
            outlier_mask = z_score.abs() > 2
            df_result.loc[df_result['lop'] == lop, f'{col}_IsOutlier'] = outlier_mask

    return df_result

# Th·ª±c hi·ªán t√≠nh to√°n
df_zscore = calculate_zscore_and_outliers(df, score_cols)

print("\n--- K·∫øt qu·∫£ Z-score v√† Outlier (5 D√≤ng ƒë·∫ßu ti√™n) ---")
# Ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt li√™n quan
cols_to_show = ['lop', 'mahs'] + [c for c in df_zscore.columns if 'ZScore' in c or 'IsOutlier' in c]
print(df_zscore[cols_to_show].head())

# Hi·ªÉn th·ªã t·ªïng s·ªë gi√° tr·ªã b·∫•t th∆∞·ªùng t√¨m th·∫•y
total_outliers = df_zscore[[c for c in df_zscore.columns if 'IsOutlier' in c]].sum().sum()
print(f"\nüéâ T·ªïng s·ªë gi√° tr·ªã b·∫•t th∆∞·ªùng (|Z| > 2) t√¨m th·∫•y tr√™n t·∫•t c·∫£ c√°c m√¥n: {int(total_outliers)}")

# ==============================================================================
# B∆Ø·ªöC 4: Tr·ª±c Quan H√≥a (Bi·ªÉu ƒë·ªì C·ªôt)
# ==============================================================================

# Chu·∫©n b·ªã d·ªØ li·ªáu t·ªïng h·ª£p s·ªë l∆∞·ª£ng Outlier
outlier_counts = {}
for col in score_cols:
    outlier_col = f'{col}_IsOutlier'
    # Nh√≥m theo l·ªõp v√† ƒë·∫øm s·ªë l∆∞·ª£ng True (Outlier)
    counts = df_zscore.groupby('lop')[outlier_col].sum()
    outlier_counts[col] = counts

df_outliers_summary = pd.DataFrame(outlier_counts).fillna(0).astype(int)
df_outliers_summary = df_outliers_summary.T # Chuy·ªÉn v·ªã ƒë·ªÉ m√¥n h·ªçc l√† index, l·ªõp l√† c·ªôt

print("\n--- B·∫£ng t·ªïng h·ª£p s·ªë l∆∞·ª£ng gi√° tr·ªã b·∫•t th∆∞·ªùng (Outlier) ---")
print(df_outliers_summary)


# T·∫°o Bi·ªÉu ƒë·ªì C·ªôt (Bar Plot)
plt.figure(figsize=(18, 8))

# S·ª≠ d·ª•ng 'melt' ƒë·ªÉ chuy·ªÉn DataFrame v·ªÅ d·∫°ng d√†i (long format)
df_plot = df_outliers_summary.reset_index().rename(columns={'index': 'M√¥n h·ªçc'})
df_plot_melted = df_plot.melt(id_vars='M√¥n h·ªçc', var_name='L·ªõp', value_name='S·ªë l∆∞·ª£ng Outlier')

# V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
ax = sns.barplot(x='M√¥n h·ªçc', y='S·ªë l∆∞·ª£ng Outlier', hue='L·ªõp', data=df_plot_melted, palette='viridis')

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† nh√£n
plt.title('S·ªë l∆∞·ª£ng Gi√° tr·ªã B·∫•t th∆∞·ªùng (|Z| > 2) theo M√¥n h·ªçc v√† L·ªõp', fontsize=16)
plt.xlabel('M√¥n h·ªçc', fontsize=12)
plt.ylabel('S·ªë l∆∞·ª£ng H·ªçc sinh c√≥ ƒëi·ªÉm b·∫•t th∆∞·ªùng', fontsize=12)
plt.xticks(rotation=45, ha='right')

# Th√™m gi√° tr·ªã s·ªë l√™n tr√™n c·ªôt
for p in ax.patches:
    height = p.get_height()
    if height > 0:
        ax.annotate(f'{int(height)}',
                    (p.get_x() + p.get_width() / 2., height),
                    ha='center', va='center',
                    xytext=(0, 9),
                    textcoords='offset points',
                    fontsize=10)

plt.legend(title='L·ªõp', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

